Practical 2 lab exe

1) Write a shell script that calculates sum of number from 1 to user provided value using a for loop

#!/bin/bash

# Prompt the user to enter a value
echo "Enter a number:"
read num

# Initialize the sum variable
sum=0

# Loop from 1 to the user-provided value
for (( i=1; i<=$num; i++ ))
do
    # Add the current number to the sum
    sum=$((sum + i))
done

# Display the sum
echo "The sum of numbers from 1 to $num is: $sum"



2) Write a script to generate the fibonacci series upto a specified number of terms using a for loop

#!/bin/bash

# Prompt the user to enter the number of terms
echo "Enter the number of terms:"
read num_terms

# Initialize variables for the first two Fibonacci numbers
a=0
b=1

# Display the first two Fibonacci numbers
echo "Fibonacci series up to $num_terms terms:"
echo -n "$a $b "

# Calculate and display the rest of the Fibonacci series using a for loop
for (( i=3; i<=num_terms; i++ ))
do
    # Calculate the next Fibonacci number
    next=$((a + b))
    
    # Display the next Fibonacci number
    echo -n "$next "

    # Update variables for the next iteration
    a=$b
    b=$next
done

echo ""


3) Develop a script that checks whether user input is prime or not using a for loop


#!/bin/bash

# Function to check if a number is prime
is_prime() {
    local num=$1
    if [ $num -lt 2 ]; then
        echo "$num is not a prime number."
        return
    fi

    for (( i=2; i*i<=num; i++ ))
    do
        if [ $((num % i)) -eq 0 ]; then
            echo "$num is not a prime number."
            return
        fi
    done

    echo "$num is a prime number."
}

# Prompt the user to enter a number
echo "Enter a number:"
read input_number

# Call the function to check if the input number is prime
is_prime $input_number


4) Create a script that reverses a given number using a while lopp

#!/bin/bash

# Function to reverse a number
reverse_number() {
    local num=$1
    local reversed=0

    while [ $num -gt 0 ]
    do
        # Get the last digit of the number
        last_digit=$((num % 10))

        # Append the last digit to the reversed number
        reversed=$((reversed * 10 + last_digit))

        # Remove the last digit from the original number
        num=$((num / 10))
    done

    echo "$reversed"
}

# Prompt the user to enter a number
echo "Enter a number:"
read input_number

# Call the function to reverse the input number
reversed_number=$(reverse_number $input_number)

echo "Reversed number: $reversed_number"


5) Write script tot display all files in aidrectory using for loop

#!/bin/bash

# Prompt the user to enter the directory path
echo "Enter the directory path:"
read directory

# Check if the directory exists
if [ ! -d "$directory" ]; then
    echo "Directory not found."
    exit 1
fi

# Display all files in the directory using a for loop
echo "Files in directory $directory:"
for file in "$directory"/*
do
    # Check if the file is a regular file
    if [ -f "$file" ]; then
        echo "$file"
    fi
done

6) Create a menu-driver calculator script that performs basic arithmetic operations 


---> Code:

#! /usr/bin/bash

echo "Enter 1st Number: "
read a 

echo "Enter 2nd Number: "
read b 

echo "Which operation do you wanna perform"
echo "1. Addition      2. Subtraction        3. Multiplication       4. Division        5. Exit Calculator Interface"
read c

if [ $c -eq 1 ]
then
	let d=$a+$b
	echo "Sum of these two numbers is: $d"
fi

if [ $c -eq 2 ]
then
	echo " "
	echo "Do you wanna Subtract: "
	echo "1. 1st no. from 2nd no."
	echo "OR"
	echo "2. 2nd no. from 1st no."
	echo "Enter 1 or 2 as per your need."
	read e
	
	if [ $e -eq 1 ]
	then
		let d=$b-$a
		echo " "
		echo "When you subtract 1st no. from 2nd no. you get: $d"
	
	elif [ $e -eq 2 ]
	then
		let d=$a-$b
		echo " "
		echo "When you subtract 2nd no. from 1st no. you get: $d"
	fi
fi

if [ $c -eq 3 ]
then
	let d=$a*$b
	echo "Multiplication of these two numbers is: $d"
fi

if [ $c -eq 4 ]
then
	echo " "
	echo "Do you wanna Divide: "
	echo "1. 1st no. by 2nd no."
	echo "OR"
	echo "2. 2nd no. by 1st no."
	echo "Enter 1 or 2 number as per your need."
	read e
	
	if [ $e -eq 1 ]
	then
		echo " "
		echo "When you divide 1st no. by 2nd no. you get: " 
		echo "scale=2; $a/$b" | bc
	
	elif [ $e -eq 2 ]
	then
		echo " "
		echo "When you divide 2nd no. by 1st no. you get: "
		echo "scale=2; $b/$a" | bc
	fi
fi





Practical 3 lab exe

exe 1: Write a c program using system call that let user choose to copy either the first half or second half of the file by entering 1 or 2

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#define BUFFER_SIZE 1024

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <source_file> <destination_file>\n", argv[0]);
        return 1;
    }

    char *source_file = argv[1];
    char *destination_file = argv[2];

    int source_fd = open(source_file, O_RDONLY);
    if (source_fd == -1) {
        perror("Error opening source file");
        return 1;
    }

    off_t file_size = lseek(source_fd, 0, SEEK_END);
    if (file_size == -1) {
        perror("Error getting file size");
        close(source_fd);
        return 1;
    }

    lseek(source_fd, 0, SEEK_SET);

    int choice;
    printf("Choose which half to copy:\n");
    printf("1. First half\n");
    printf("2. Second half\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    off_t offset;
    off_t size;
    if (choice == 1) {
        offset = 0;
        size = file_size / 2;
    } else if (choice == 2) {
        offset = file_size / 2;
        size = file_size - offset;
    } else {
        fprintf(stderr, "Invalid choice\n");
        close(source_fd);
        return 1;
    }

    int destination_fd = open(destination_file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (destination_fd == -1) {
        perror("Error opening destination file");
        close(source_fd);
        return 1;
    }

    char buffer[BUFFER_SIZE];
    ssize_t bytes_read, bytes_written;
    off_t total_bytes_written = 0;
    lseek(source_fd, offset, SEEK_SET);
    while (total_bytes_written < size) {
        bytes_read = read(source_fd, buffer, sizeof(buffer));
        if (bytes_read == -1) {
            perror("Error reading from source file");
            close(source_fd);
            close(destination_fd);
            return 1;
        }
        if (bytes_read == 0)
            break;
        bytes_written = write(destination_fd, buffer, bytes_read);
        if (bytes_written == -1) {
            perror("Error writing to destination file");
            close(source_fd);
            close(destination_fd);
            return 1;
        }
        total_bytes_written += bytes_written;
    }

    printf("Copy successful!\n");

    close(source_fd);
    close(destination_fd);

    return 0;
}


exe 2; Create a c program using system calls that keeps reading from the console until the user types "$" save the input data into a file called input.txt

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#define BUFFER_SIZE 1024

int main() {
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read;
    int fd = open("input.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);

    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    printf("Enter your input (type \"$\" to end):\n");

    while ((bytes_read = read(STDIN_FILENO, buffer, sizeof(buffer))) > 0) {
        if (write(fd, buffer, bytes_read) != bytes_read) {
            perror("Error writing to file");
            close(fd);
            return 1;
        }
        if (buffer[0] == '$')
            break;
    }

    close(fd);
    printf("Input saved to input.txt\n");

    return 0;
}

exe 3: Write a c program that encrypts a text file using a simple encryption technique and saves the encrypted content to a new file

#include <stdio.h>
#include <stdlib.h>

#define KEY 3 // Shift value for encryption

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <input_file> <output_file>\n", argv[0]);
        return 1;
    }

    FILE *input_file = fopen(argv[1], "r");
    if (input_file == NULL) {
        perror("Error opening input file");
        return 1;
    }

    FILE *output_file = fopen(argv[2], "w");
    if (output_file == NULL) {
        perror("Error opening output file");
        fclose(input_file);
        return 1;
    }

    int ch;
    while ((ch = fgetc(input_file)) != EOF) {
        if (ch >= 'A' && ch <= 'Z') {
            ch = ((ch - 'A') + KEY) % 26 + 'A'; // Encrypt uppercase letters
        } else if (ch >= 'a' && ch <= 'z') {
            ch = ((ch - 'a') + KEY) % 26 + 'a'; // Encrypt lowercase letters
        }
        fputc(ch, output_file);
    }

    fclose(input_file);
    fclose(output_file);

    printf("Encryption successful. Encrypted content saved to %s\n", argv[2]);

    return 0;
}


Practical 4--------------

exe 1: Create a c program that prompts a user to enter a directory name and uses the mkdir system call to create the directory

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>

int main() {
    char dirname[100];

    printf("Enter the directory name: ");
    fgets(dirname, sizeof(dirname), stdin);

    // Remove newline character from dirname
    for (int i = 0; dirname[i] != '\0'; i++) {
        if (dirname[i] == '\n') {
            dirname[i] = '\0';
            break;
        }
    }

    if (mkdir(dirname, 0777) == -1) {
        perror("Error creating directory");
        return 1;
    }

    printf("Directory '%s' created successfully.\n", dirname);

    return 0;
}


exe 2: Write a program to open the current directory using opendir and reads the content using readdir then displays the list of directory entries

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;

    // Open the current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("Error opening directory");
        return 1;
    }

    // Read directory entries and display them
    printf("Contents of current directory:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    // Close the directory
    closedir(dir);

    return 0;
}


exe 3: Write a program to delete a directory specified by the user using rmdir system call

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    char dirname[100];

    printf("Enter the directory name to delete: ");
    fgets(dirname, sizeof(dirname), stdin);

    // Remove newline character from dirname
    for (int i = 0; dirname[i] != '\0'; i++) {
        if (dirname[i] == '\n') {
            dirname[i] = '\0';
            break;
        }
    }

    // Attempt to delete the specified directory
    if (rmdir(dirname) == -1) {
        perror("Error deleting directory");
        return 1;
    }

    printf("Directory '%s' deleted successfully.\n", dirname);

    return 0;
}


exe 4: Write the program that uses the getcwd system call to retrieve the current working directory and ddisplay it to the user

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    char cwd[1024];

    // Get the current working directory
    if (getcwd(cwd, sizeof(cwd)) == NULL) {
        perror("Error getting current working directory");
        return 1;
    }

    // Display the current working directory to the user
    printf("Current working directory: %s\n", cwd);

    return 0;
}


---------practical 5

Q1. Write a program using system calls for operation on process to stimulate n fork calls to create (2^n - 1) child processes 


---> Code: 

#include<stdio.h>              // for printf and scanf
#include<unistd.h>             // for fork() & getpid()
#include<sys/types.h>          // for fork() & getpid()

int main(){
	
	int n;
	
	printf("# Enter the no. of times you want to run the fork system call: ");
	scanf("%d", &n);
	
	for(int i=0; i<n; i++){
		pid_t r;
		r = fork();
		if(r==0){
			printf("Current child process pid is %d \n", getpid());
		}
	}

	return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _	

Q2: Write a c program utilising the fork of system call to generate the following process hierarchy p1->p2->p3 the program should display the process id and parent process id for each process created

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t p1, p2, p3;

    // P1 process
    p1 = getpid();
    printf("P1: PID = %d, Parent PID = %d\n", p1, getppid());

    // Create P2 process
    p2 = fork();
    if (p2 < 0) {
        perror("Error in forking P2");
        return 1;
    } else if (p2 == 0) { // Child process (P2)
        printf("P2: PID = %d, Parent PID = %d\n", getpid(), getppid());

        // Create P3 process
        p3 = fork();
        if (p3 < 0) {
            perror("Error in forking P3");
            return 1;
        } else if (p3 == 0) { // Child process (P3)
            printf("P3: PID = %d, Parent PID = %d\n", getpid(), getppid());
        }
    } else { // Parent process (P1)
        // Wait for P2 to finish
        wait(NULL);
    }

    return 0;
}

Q3. Write a program using system calls for operations on processes to create a heirarchy of processes: P4 <- P3 <- P2 <- P1 -> P5 -> P6 -> P7, also stimulate process P4 as an orphan process and P7 as zombie processs 

DIAGRAM
---> Code: 

#include<stdio.h>               //  for printf and scanf 
#include<unistd.h>              //  for fork(), getpid(), sleep() & getppid() 
#include<sys/types.h>           //  for fork(), getpid() & getppid() 
#include<stdlib.h>              //  for exit() 

int main()
{
	printf("P1 PID : %d \n", (int) getpid());
	
	pid_t pid = fork();
	
	if(pid == 0)
	{
		printf("P5 PID : %d Parent P1 PID : %d\n", (int) getpid(), (int) getppid());
		pid_t pid_1 = fork();
		if(pid_1 == 0)
		{
			printf("P6 PID : %d Parent P5 PID : %d \n", (int) getpid(), (int) getppid());
			
			pid_t pid_2 = fork();
			sleep(5);
			
			if(pid_2 == 0)
			{
				printf("Zombie process P7's PID: %d \n", (int) getpid());
				printf("Parent P6 PID : %d \n", (int) getppid());
			}
			else
			{
				exit(0);
			}
		}
		else
		{
			exit(0);
		}
	}
	
	else
	{
		pid = fork();
		if(pid == 0)
		{
			printf("P2 PID : %d Parent P1 PID : %d\n", (int) getpid(), (int) getppid());
			pid_t pid_1 = fork();
			if(pid_1 == 0)
			{
				printf("P3 PID : %d Parent P2 PID : %d \n", (int) getpid(), (int) getppid());
			
				pid_t pid_2 = fork();
				if(pid_2 == 0)
				{
					sleep(3);
				}
				else
				{
					printf("Orphan child process P4's PID : %d \n", (int) pid_2);
					printf("P4's New Parent PID : %d \n", (int) getppid());
				}
			}
			else
			{
				exit(0);
			}
		}	
	}
	
	return 0;
}


# Practical-6 (Creation of Multithreaded Processes using Pthread Library)  


Q1. Write a program using pthread to concatenate the strings, where multiple strings are passed to thread function 


---> Code:

#include<stdio.h>
#include<unistd.h>
#include<pthread.h>
#include<string.h>


char str1[100], str2[100];
char result[1000];


void *concatenatestrings(){
	strcat(result, str1);
	strcat(result, str2);
	pthread_exit(NULL);
}

int main(){
	pthread_t thread;
	printf("* Enter the first string: ");
	scanf("%s", str1);
	printf("* Enter the second string: ");
	scanf("%s", str2);
	
	pthread_create(&thread, NULL, concatenatestrings, NULL);
	pthread_join(thread, NULL);
	
	printf("@ Final result is: %s \n", result);
	return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _	


Q2. Write a program using pthread to find the length of string, where strings are passed to thread function 


---> Code:

#include<stdio.h>
#include<unistd.h>
#include<pthread.h>
#include<string.h>

char length1[100];
int length=0;

void *lengthstr(){
	length=strlen(length1);
	pthread_exit(NULL);
}


int main(){
	pthread_t thread;
	printf("* Enter the String: ");
	scanf("%[^\n]s", length1);
	
	pthread_create(&thread, NULL, lengthstr, NULL);
	pthread_join(thread, NULL);
	printf("* Total length of string is: %d \n", length);
	return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _	

Q3. Write a program that performs statistical operations of calculating the average, maximum & minimum for a set of numbers. Create three threads where each performs their respective operations.


---> Code:

#include<stdio.h>
#include<pthread.h>

int arr[10] = {99, 22, 00, 88, 11, 102, 33, 66, 44, 55};

void *sort(){
	for(int i=0; i<10; i++){
		for(int j=0; j<10; j++){
			if(arr[i] < arr[j]){
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
}


void *min(){
	int min = arr[0];
	printf("* Minimum element is = %d\n", min);
	pthread_exit(NULL);
}


void *max(){
	int max = arr[9];
	printf("* Maximum element is = %d \n", max);
	pthread_exit(NULL);
}


void *avg(){
	int sum=0;
	for(int i=0;i<10;i++)
	{
		sum = sum + arr[i];
	}
	sum = sum/10;
	
	printf("* The average of the elements = %d \n", sum);
	printf("\n");
	pthread_exit(NULL);
}


int main(){

	printf("\n");		
	
	/* 
	printf("Enter 10 elements in the array: ");
	for(int i=0; i<10; i++)
	{
		scanf("%d", &arr[i]);
	}
	printf("\n");
	*/
	
	printf("# Initial input array is: ");
	for(int i=0; i<10; i++){
		printf("%d ", arr[i]);
	}
	printf("\n");
	
	
	pthread_t sort_thread, max_thread, min_thread, avg_thread;
	
	pthread_create(&sort_thread, NULL, sort, NULL);
	pthread_join(sort_thread, NULL);
	
	pthread_create(&max_thread, NULL, max, NULL);
	pthread_join(max_thread, NULL);
	
	pthread_create(&min_thread, NULL, min, NULL);
	pthread_join(min_thread, NULL);
	
	pthread_create(&avg_thread, NULL, avg, NULL);
	pthread_join(avg_thread, NULL);
	return 0;
} 


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _	

Q4. Write a multithreaded program where an array of integers is passed globally and is divided into two smaller lits and given as input to two threads. The thread will sort their half of the list and will pass the sorted list to a third thread which merges and sorts the list. The final sorted list is printed by the parent thread. 


---> Code:

#include<stdio.h>
#include<pthread.h>

int arr[10] = {99, 22, 00, 88, 11, 100, 33, 66, 44, 55};


int arr_first_half[5], arr_second_half[5], final_arr[10];


void *final_merge_sort(){

	for(int i=0; i<5; i++){
		final_arr[i] = arr_first_half[i];
		final_arr[i+5] = arr_second_half[i];
	}
	
	printf("# Merged array is: ");
	for(int i=0; i<10; i++){
		printf("%d ", final_arr[i]);
	}
	printf("\n");
	
	for(int i=0; i<10; i++){
		for(int j=0; j<10; j++){
			if(final_arr[i] < final_arr[j]){
				int temp = final_arr[i];
				final_arr[i] = final_arr[j];
				final_arr[j] = temp;
			}
		}
	}

	printf("@ Final Merged & Sorted array is: ");
	for(int i=0; i<10; i++){
		printf("%d ", final_arr[i]);
	}
	printf("\n");
	printf("\n");

	pthread_exit(NULL);
}


void *individual_sort(){
	for(int i=0; i<5; i++){
		for(int j=0; j<5; j++){
			if(arr_first_half[i] < arr_first_half[j]){
				int temp = arr_first_half[i];
				arr_first_half[i] = arr_first_half[j];
				arr_first_half[j] = temp;
			}
			if(arr_second_half[i] < arr_second_half[j]){
				int temp = arr_second_half[i];
				arr_second_half[i] = arr_second_half[j];
				arr_second_half[j] = temp;	
			}
		}
	}
		
	pthread_exit(NULL);
}


int main()
{
	printf("\n");		
	
	/* 
	printf("Enter 10 elements in the array: ");
	for(int i=0; i<10; i++)
	{
		scanf("%d", &arr[i]);
	}
	printf("\n");
	*/
		
	printf("# Initial input array is: ");
	for(int i=0; i<10; i++){
		printf("%d ", arr[i]);
	}
	printf("\n");

	
	for(int i=0; i<5; i++){
		arr_first_half[i] = arr[i];
		arr_second_half[i] = arr[i+5];
	}
	
	
	
	pthread_t parent_thread;
	pthread_create(&parent_thread, NULL, individual_sort, NULL);
	pthread_join(parent_thread, NULL);
	
	printf("* First half sorted array is: ");
	for(int i=0; i<5; i++){
		printf("%d ", arr_first_half[i]);
	}
	printf("\n");
	
	
	printf("* Second half sorted array is: ");
	for(int i=0; i<5; i++){
		printf("%d ", arr_second_half[i]);
	}
	printf("\n");
	
	pthread_create(&parent_thread, NULL, final_merge_sort, NULL);
	pthread_join(parent_thread, NULL);
	
	return 0;
} 


Q5; Create a program using pthread_create to genereate multiple threads each thread should display its unique id and execution sequence 

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5

void *thread_function(void *arg) {
    int thread_id = *((int *)arg);
    printf("Thread %d: Unique ID = %ld\n", thread_id, pthread_self());
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];
    int result, i;

    for (i = 0; i < NUM_THREADS; i++) {
        thread_args[i] = i + 1;
        result = pthread_create(&threads[i], NULL, thread_function, (void *)&thread_args[i]);
        if (result) {
            fprintf(stderr, "Error creating thread %d\n", i + 1);
            return 1;
        }
    }

    for (i = 0; i < NUM_THREADS; i++) {
        result = pthread_join(threads[i], NULL);
        if (result) {
            fprintf(stderr, "Error joining thread %d\n", i + 1);
            return 1;
        }
    }

    return 0;
}



Q6: Create a thread application that demonstrates graceful thread termination using pthread_exit for resource cleanup compared to abrupt termination via pthread_cancel

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_THREADS 2

void *thread_function(void *arg) {
    int thread_id = *((int *)arg);
    printf("Thread %d started\n", thread_id);

    // Simulate some work
    for (int i = 0; i < 5; i++) {
        printf("Thread %d working... (%d/5)\n", thread_id, i + 1);
        sleep(1);
    }

    printf("Thread %d cleanup and exit\n", thread_id);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];
    int result, i;

    // Create threads
    for (i = 0; i < NUM_THREADS; i++) {
        thread_args[i] = i + 1;
        result = pthread_create(&threads[i], NULL, thread_function, (void *)&thread_args[i]);
        if (result) {
            fprintf(stderr, "Error creating thread %d\n", i + 1);
            return 1;
        }
    }

    // Wait for threads to finish
    for (i = 0; i < NUM_THREADS; i++) {
        result = pthread_join(threads[i], NULL);
        if (result) {
            fprintf(stderr, "Error joining thread %d\n", i + 1);
            return 1;
        }
    }

    printf("All threads terminated gracefully\n");

    return 0;
}


Practicl 7

* Producer & Consumer Using Mutex 


---> Code: 

#include <stdio.h> 
#include <stdlib.h> 
#include <pthread.h> 


int BUFFER_SIZE = 5; 
int buffer[5]; 
int count = 0; 
int last_consumed_index = 0; 

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; 
pthread_cond_t cond_producer = PTHREAD_COND_INITIALIZER; 
pthread_cond_t cond_consumer = PTHREAD_COND_INITIALIZER; 

void* producer(void* arg) {
    int item;
    int iterations = 0;
    while (iterations < 10) { // exit after 10 iterations
        item = rand() % 100; // generate a random item
        pthread_mutex_lock(&mutex);
        if (count == BUFFER_SIZE) {
            pthread_cond_wait(&cond_producer, &mutex);
        }
        if (count == 0) {
            last_consumed_index = 0; // reset last consumed index if buffer is empty
        }
        buffer[last_consumed_index++] = item;
        printf("Produced item: %d\n", item);
        count++;
        if (count == 1) {
            pthread_cond_signal(&cond_consumer);
        }
        pthread_mutex_unlock(&mutex);
        iterations++;
    }
    return NULL;
}

void* consumer(void* arg) {
    int item;
    int iterations = 0;
    while (iterations < 10) { // exit after 10 iterations
        pthread_mutex_lock(&mutex);
        if (count == 0) {
            pthread_cond_wait(&cond_consumer, &mutex);
        }
        item = buffer[--last_consumed_index];
        printf("Consumed item: %d\n", item);
        count--;
        if (count == BUFFER_SIZE - 1) {
            pthread_cond_signal(&cond_producer);
        }
        pthread_mutex_unlock(&mutex);
        iterations++;
    }
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;
    srand(time(NULL)); // initialize the random seed

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    return 0;
}



* Reader Writer Problem using Semaphore: 


---> Code: 

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

int NUM_READERS = 3;
int NUM_WRITERS = 2;
int MAX_ATTEMPTS = 5;

// Shared data
int shared_data = 0;
int num_readers = 0;

// Semaphores
sem_t mutex;
sem_t wrt;

// Reader function
void *reader(void *arg) {
    int id = *(int*)arg;
    int attempts = 0;

    while (attempts < MAX_ATTEMPTS) {
        // Entry section
        sem_wait(&mutex);
        num_readers++;
        if (num_readers == 1) {
            sem_wait(&wrt);
        }
        sem_post(&mutex);

        // Critical section
        printf("Reader %d read shared_data as %d\n", id, shared_data);

        // Exit section
        sem_wait(&mutex);
        num_readers--;
        if (num_readers == 0) {
            sem_post(&wrt);
        }
        sem_post(&mutex);

        attempts++;
    }

    pthread_exit(NULL);
}

// Writer function
void *writer(void *arg) {
    int id = *(int*)arg;
    int attempts = 0;

    while (attempts < MAX_ATTEMPTS) {
        // Entry section
        sem_wait(&wrt);

        // Critical section
        shared_data++;
        printf("Writer %d wrote shared_data as %d\n", id, shared_data);

        // Exit section
        sem_post(&wrt);

        attempts++;
    }

    pthread_exit(NULL);
}

int main() {
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Create reader threads
    pthread_t reader_threads[NUM_READERS];
    int reader_ids[NUM_READERS];
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i;
        pthread_create(&reader_threads[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    pthread_t writer_threads[NUM_WRITERS];
    int writer_ids[NUM_WRITERS];
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i;
        pthread_create(&writer_threads[i], NULL, writer, &writer_ids[i]);
    }

    // Wait for threads to finish
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writer_threads[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}


Practical 8 :

# Practical-8th (Inter Process Communication Using Pipes/Shared Memory/RCP)



* Establish Interprocess communication (IPC) between Parent and child process using unnamed pipe.


---> Code: 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main() {
	int pipefd[2]; // file descriptors for the pipe
	char buffer[25];
	pid_t pid;

	if (pipe(pipefd) == -1) { // create the pipe
    	printf("Pipe failed\n");
    	return 1;
	}

	pid = fork(); // create a child process

	if (pid < 0) { // fork failed
    	printf("Fork failed\n");
    	return 1;
	}

	if (pid > 0) { // parent process
    	close(pipefd[0]); // close the read end of the pipe
    	printf("Parent process writing to pipe...\n");
    	write(pipefd[1], "Hello, child process!", 22);
    	close(pipefd[1]); // close the write end of the pipe
	}
	else { // child process
    	close(pipefd[1]); // close the write end of the pipe
    	printf("Child process reading from pipe...\n");
    	read(pipefd[0], buffer, 25);
    	printf("Child process received: %s\n", buffer);
    	close(pipefd[0]); // close the read end of the pipe
	}

	return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _




* Establish Interprocess communication (IPC) between Parent and child process using named pipe.


---> Code: 

#include <sys/types.h> 
#include <sys/stat.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>

int main(){

	int pid, fd1, fd2;
	char buffer[20];
	
	mkfifo("my_Pipe", 0666); 
	
	pid=fork();
	if(pid > 0){
		//Parent Section
		fd1=open("my_Pipe", O_WRONLY); 
		write(fd1, "Hello Child Process\n",20);
	}
	if(pid==0){
		//Child section
		fd2=open("my_Pipe", O_RDONLY);
		read(fd2, buffer, 20);
		printf("%s", buffer);
	}
	
	return 0;
}



* Demonstrate the usage of shared memeory for IPC

I) create a shared memory segment and attached it into multiple processes
ii) develop a producer consumer model where one process writes data into shared memory and another process reads from it


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <errno.h>

#define SHM_KEY 12345   // Shared memory key
#define SHM_SIZE 1024   // Size of the shared memory segment
#define BUFFER_SIZE 256 // Size of the data buffer

// Structure for shared memory data
typedef struct {
    int written; // Flag to indicate if data is written
    char data[BUFFER_SIZE]; // Data buffer
} SharedData;

int main() {
    pid_t pid;
    int shmid;
    void *shm_ptr;
    SharedData *shared_data;

    // Create a shared memory segment
    if ((shmid = shmget(SHM_KEY, SHM_SIZE, IPC_CREAT | 0666)) == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment to the process's address space
    if ((shm_ptr = shmat(shmid, NULL, 0)) == (void *)-1) {
        perror("shmat");
        exit(1);
    }

    // Convert the shared memory pointer to the SharedData type
    shared_data = (SharedData *)shm_ptr;

    // Fork a child process
    pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    }

    // Producer Process
    if (pid == 0) {
        printf("Producer Process (PID: %d) started\n", getpid());

        // Produce data and write it into shared memory
        strcpy(shared_data->data, "Hello, shared memory!");
        shared_data->written = 1;

        printf("Producer Process: Data written into shared memory\n");

        // Detach the shared memory segment
        if (shmdt(shm_ptr) == -1) {
            perror("shmdt");
            exit(1);
        }

        exit(0);
    }

    // Consumer Process
    else {
        printf("Consumer Process (PID: %d) started\n", getpid());

        // Wait until data is written into shared memory
        while (!shared_data->written) {
            printf("Consumer Process: Waiting for data...\n");
            sleep(1);
        }

        // Read data from shared memory
        printf("Consumer Process: Data read from shared memory: %s\n", shared_data->data);

        // Detach the shared memory segment
        if (shmdt(shm_ptr) == -1) {
            perror("shmdt");
            exit(1);
        }

        // Delete the shared memory segment
        if (shmctl(shmid, IPC_RMID, NULL) == -1) {
            perror("shmctl");
            exit(1);
        }

        exit(0);
    }

    return 0;
}


* Explore IPC using message passing technique

I) design two process where one process send signal to another process
ii) develop a signal handlers in both processes to manage incoming signals and perform specific action based on received signal


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

pid_t receiver_pid;

// Signal handler for sender process
void sender_signal_handler(int signum) {
    if (signum == SIGUSR1) {
        printf("Sender: Received SIGUSR1 signal from Receiver\n");
    }
}

// Signal handler for receiver process
void receiver_signal_handler(int signum) {
    if (signum == SIGUSR1) {
        printf("Receiver: Received SIGUSR1 signal from Sender\n");
        printf("Receiver: Sending SIGUSR2 signal to Sender\n");
        kill(receiver_pid, SIGUSR2);
    } else if (signum == SIGUSR2) {
        printf("Receiver: Received SIGUSR2 signal from Sender\n");
    }
}

int main() {
    pid_t sender_pid;
    int result;

    // Fork a child process (Receiver)
    receiver_pid = getpid(); // Store receiver's PID
    sender_pid = fork();

    if (sender_pid < 0) {
        perror("fork");
        exit(1);
    }

    // Receiver process
    if (sender_pid == 0) {
        printf("Receiver: PID = %d\n", getpid());
        
        // Set signal handler for receiver process
        signal(SIGUSR1, receiver_signal_handler);
        signal(SIGUSR2, receiver_signal_handler);

        // Wait for signals
        while (1) {
            sleep(1); // Sleep to keep the process alive
        }
    }

    // Sender process
    else {
        printf("Sender: PID = %d\n", getpid());

        // Set signal handler for sender process
        signal(SIGUSR1, sender_signal_handler);

        // Send SIGUSR1 signal to receiver process
        printf("Sender: Sending SIGUSR1 signal to Receiver\n");
        kill(sender_pid, SIGUSR1);

        // Wait for receiver process to finish
        wait(NULL);
    }

    return 0;
}
